import{M as n}from"./chunks/ModelSelector.DK3fzM1Q.js";import{c as e,o as t,af as i,J as l}from"./chunks/framework.CuQK53I8.js";const d=JSON.parse('{"title":"Coding","description":"","frontmatter":{"title":"Coding"},"headers":[],"relativePath":"recommendations/coding/index.md","filePath":"recommendations/coding/index.md"}'),r={name:"recommendations/coding/index.md"},g=Object.assign(r,{setup(p){const a=[{ramMin:64,vramMin:16,models:[{"Qwen3 Coder 30B A3B Instruct":{parameters:30,quantization:"BF16"}}],usefulness:1},{ramMin:32,vramMin:16,models:[{"Qwen3 Coder 30B A3B Instruct":{parameters:30,quantization:"Q8_K_XL"}}],usefulness:.7},{ramMin:32,vramMin:6,models:[{"Qwen3 Coder 30B A3B Instruct":{parameters:30,quantization:"Q6_K_XL"}}],usefulness:.5},{ramMin:16,vramMin:4,models:[{"Qwen3 4B Instruct 2507":{parameters:4,quantization:"F16"}}],usefulness:.3},{ramMin:16,vramMin:0,models:[{"Qwen3 4B Instruct 2507":{parameters:4,quantization:"Q4_K_XL"}}],usefulness:0}];return(h,s)=>(t(),e("div",null,[s[0]||(s[0]=i('<h1 id="coding-recommendations" tabindex="-1">Coding Recommendations <a class="header-anchor" href="#coding-recommendations" aria-label="Permalink to “Coding Recommendations”">​</a></h1><p><strong>Prioritizing Very High Precision in Code Generation and Debugging</strong></p><p>When working with AI-assisted coding, <strong>precision is non-negotiable</strong>. Even minor hallucinations, syntactic errors, or incorrect logic can introduce bugs, security vulnerabilities, or maintenance debt. These recommendations are tailored for developers who require <strong>extremely high-fidelity outputs</strong>—not just plausible-looking code, but <strong>correct, production-ready, and logically sound</strong> implementations.</p><p>Use the selector below to identify the best model for a given hardware configuration:</p>',4)),l(n,{modelDefinitions:a}),s[1]||(s[1]=i(`<h1 id="prompting" tabindex="-1">Prompting <a class="header-anchor" href="#prompting" aria-label="Permalink to “Prompting”">​</a></h1><p>To effectively prompt coding models in a chat-based interface, consider the following guidelines:</p><ol><li><strong>State your goal clearly.</strong> Provide context for your request. An authoritative tone often yields better results.</li><li><strong>Use code blocks.</strong> Enclose any code, error messages, data structures, or formatting examples within markdown code blocks for clarity.</li><li><strong>Provide examples.</strong> Include relevant code snippets or data samples to illustrate your request.</li></ol><p>Below are some examples of well-structured prompts.</p><h2 id="generating-a-function" tabindex="-1">Generating a Function <a class="header-anchor" href="#generating-a-function" aria-label="Permalink to “Generating a Function”">​</a></h2><p>This prompt clearly defines the input data structure and the desired outcome.</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Write a JavaScript function that generates a descriptive sentence about a person, given an input object with the following structure:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dead&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;alive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">The function should return a grammatically correct sentence.</span></span></code></pre></div><h2 id="requesting-debugging-help" tabindex="-1">Requesting Debugging Help <a class="header-anchor" href="#requesting-debugging-help" aria-label="Permalink to “Requesting Debugging Help”">​</a></h2><p>This prompt provides both the error and the code that produced it, creating a complete context for the model.</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">I have encountered this error:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Error: Cannot divide by zero</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">In the following JavaScript code:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cannot divide by zero&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Can you help me refactor the error handling to be more user-friendly?</span></span></code></pre></div>`,10))]))}});export{d as __pageData,g as default};
